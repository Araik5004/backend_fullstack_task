Описание тестового задания

1 Задание 
Метод login() , Main_page контроллера  принемает данные формы ,
(в файле public/js/app.js  поменял в запрсах axios передачу параметров с JSON  на URLSearchParams .)
далее валидирую данные на валидный майл и пароль.
По е-мейлу ищу пользователя в таблице "user".
Если есть такой пользователь  и пароли совпадают , то аутентификация прошла успешно.
	
2 Задание
Метод comment() , Main_page контроллера  принемает данные формы 
(в файле public/js/app.js  добавил  запрс axios при нажати на кнопку "Add comment"),
далее валидирую данные , в коде есть валидация на google recaptcha , но она закоментированна.
В таблице "comment" добавил :
parent_id 	- в случае репоста - id - коментария ( иначе 0 - обычный коментарий)
type		- для коментирования разных сущьностей (постов, картинок в галерей, видео ...),  в нашем случае "post"
public		- статус показа (1 - покозать/ 0 скрыть) , если понадобится модерация.
В случае успешной валидации , записываем  в базу.

3 Задание
Метод like() , Main_page контроллера  принемает id поста.
В таблице "user" добавил :
likes  		- число лайков.
Проверка данных пользователя, авторизация , наличие лайков.
Метод add_like_to_post() , Post_model  модели , обновляет таблици "post" , "user" в рамках одной транзакции.
В таблице "post" увеличивается число лайков (+1) , у пользователя "user" уменьшается (-1),
проверяется число затронутых записей при обновлений , 
в случае не удачи - откат/rollback , в случае удачи запись/commit.
При удачной записи , перегружается модель Post_model, и возврощается количество лайков.

4 Задание
Метод add_money() , Main_page контроллера  принимает зачисляемую сумму $sum.
Метод add_balance() , User_model  модели , обновляет таблицу  "user" , 
обнавляются два поля :
wallet_balance - баланс (+$sum) , 
wallet_total_refilled  - сумма, на которую юзер пополнил баланс за все время  (+$sum).
проверяется число затронутых записей при обновлений , 
При удачной записи , перегружается модель User_model


5 Задание
Метод buy_boosterpack() , Main_page контроллера  принемает id boosterpack-а.
Проверяется наличие денег у пользователя на покупку boosterpack-а
Метод user_buy_booster_pack() , User_model  модели , обновляет таблици "boosterpack" , "user" в рамках одной транзакции.
В таблице "user" увеличивается число лайков (по указанной формуле) 
, у  "boosterpack" меняется "bank" (по указанной формуле),
проверяется число затронутых записей при обновлений , 
в случае не удачи - откат/rollback , в случае удачи запись/commit.
При удачной записи , перегружается модель User_model, и возврощается количество добавленых лайков.


П.С.

Новый dump - mysql/test_result_dump.sql

Добавил "htaccess" (была проблема в коносли - vuejs  посылал запросы с "index.php" , стандартное решение)
https://www.codeigniter.com/userguide3/general/urls.html
public/.htaccess

